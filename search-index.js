var searchIndex = JSON.parse('{\
"edtf":{"doc":"This crate implements the Extended Date/Time Format as of …","t":[0,4,13,13,13,3,0,4,13,13,13,13,4,13,13,13,4,13,13,4,13,13,13,13,4,13,13,13,13,3,4,13,13,13,13,13,13,13,13,3,11,11,4,13,13,3,11,11,11,11,11,3,11,11,11,11,11,3,11,11,11,11,11,4,13,13,13,8,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["level_0","Edtf","Date","Interval","DateTime","Date","level_1","Certainty","Certain","Uncertain","Approximate","ApproximateUncertain","YearMask","None","OneDigit","TwoDigits","DatePart","Masked","Normal","Season","Spring","Summer","Autumn","Winter","DatePrecision","Year","Month","Day","Season","Date","Edtf","DateTime","Date","YYear","Interval","IntervalOpenFrom","IntervalOpenTo","IntervalUnknownFrom","IntervalUnknownTo","YYear","to_chrono","to_chrono","ParseError","OutOfRange","Invalid","DateTime","date","time","offset","to_chrono_naive","to_chrono","DateComplete","from_ymd","from_ymd_opt","year","month","day","Time","hour","minute","second","offset","to_chrono_naive","TzOffset","Utc","Hours","Minutes","GetTimezone","tz_offset","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","from","from","from","from","from","from","from","from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","eq","eq","ne","eq","ne","eq","ne","eq","ne","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","hash","hash","hash","hash","hash","hash","from_str","from_str","year","month","month0","day","day0","ordinal","ordinal0","weekday","iso_week","with_year","with_month","with_month0","with_day","with_day0","with_ordinal","with_ordinal0","year","month","month0","day","day0","ordinal","ordinal0","weekday","iso_week","with_year","with_month","with_month0","with_day","with_day0","with_ordinal","with_ordinal0","hour","minute","second","nanosecond","with_hour","with_minute","with_second","with_nanosecond","hour","minute","second","nanosecond","with_hour","with_minute","with_second","with_nanosecond","fix","from_offset","offset_from_local_date","offset_from_local_datetime","offset_from_utc_date","offset_from_utc_datetime","parse","from_ymd_opt","from_ymd","as_date","as_interval","as_datetime","year","month","day","parse","from_ymd_opt","from_ymd","value","year","new_opt","new_or_cal","parse","as_date","as_range","as_datetime","parse","from_year","from_ym","from_ymd","from_ymd_opt","certainty","year_in_range","from_year_masked","from_year_masked_month","from_year_masked_month_day","from_ym_masked_day","from_year_season","and_certainty","as_precision","to_chrono"],"q":["edtf","edtf::level_0","","","","","edtf","edtf::level_1","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","edtf::level_0","edtf::level_1","edtf","","","","","","","","","","","","","","","","","","","","","","","","","","","edtf::level_0","","","","","","","","","","","","","","","","","","","","edtf::level_1","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","edtf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","edtf::level_1","","","","edtf","edtf::level_0","edtf::level_1","edtf","edtf::level_1","edtf::level_0","","edtf::level_1","","","","","","","","edtf","","","","","edtf::level_1","","edtf::level_0","","","","edtf::level_1","","","","","","","","","","","","","edtf","","","","","","","","","edtf::level_0","","edtf::level_1","","","","","","","","edtf","","","","","edtf::level_0","","edtf::level_1","edtf","","edtf::level_1","","edtf","edtf::level_0","","edtf","","","","edtf::level_0","edtf::level_1","edtf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","edtf::level_0","","","","","","","","","","","","edtf::level_1","","","","","","","","","","","","","","","","","","","","","","edtf"],"d":["EDTF Level 0","","","","","","EDTF Level 1","Represents whether a date part is uncertain and in what …","no modifier","<code>?</code>","<code>~</code>","<code>%</code>","Specifies the number of Xs in <code>2019</code>/<code>201X</code>/<code>20XX</code>.","<code>2019</code>","<code>201X</code>","<code>20XX</code>","A month or a day in [DatePrecision]","","","A season in [DatePrecision] and constructor methods on […","","","","","An enum used to conveniently match on an EDTF [Date].","","","","","An EDTF date. Represents a standalone date or one end of …","Fully represents EDTF Level 1. The representation is …","A full timestamp. <code>2019-07-15T01:56:00Z</code>","<code>2018</code>, <code>2019-07-09%</code>, <code>1973?</code>, <code>1956-XX</code>, etc","<code>Y170000002</code>, <code>Y-170000002</code>","<code>2018/2019</code>, <code>2019-12-31/2020-01-15</code>, etc","<code>2019/..</code>","<code>../2019</code>","<code>2019/</code>","<code>/2019</code>","Represents a 5+ digit, signed year like <code>Y12345</code>, <code>Y-17000</code>.","If this date is complete, i.e. it has a month and a day, …","If this date is complete, i.e. it has a month and a day, …","The error type for all the <code>parse</code> methods in this crate.","A field is out of the permitted range.","The input string has some invalid character sequence.","A DateTime object.","Gets the date portion","Gets the time portion","Get the <code>TzOffset</code>. If <code>None</code> is returned, this represents a …","Convert to a [chrono::NaiveDate]","","A structure to hold the date portion of a [DateTime]. It …","Create a complete date. Panics if the date is invalid.","Create a complete date. Returns None if the date is …","","","","The time portion of a [DateTime].","0..=23","0..=59","0..=60 (because of leap seconds; only if hour==23 and …","Get the <code>TzOffset</code>. If <code>None</code> is returned, this represents a …","","If <code>features = [\\\"chrono\\\"]</code> is enabled, then this can act as …","<code>Z</code>","<code>+04</code> A number of hours only","<code>+04:30</code> A number of minutes offset from UTC.","A helper trait for getting timezone information from some …","Return the number of seconds difference fromarses a Level 0 EDTF.","","","","","","Returns a year in the range 0000..=9999.","0 if absent. Guaranteed to be absent if [Self::day] is …","0 if absent.","Parses a Date from a string. <strong>Note!</strong> This is not part of …","Returns None if year < 0 or year > 9999 or the date is …","Like [Date::from_ymd_opt], but panics if the date is …","","","If the value is a four-digit date (invalid for <code>Y</code>-years), …","If the value is a four-digit date, returns an [Edtf::Date]…","Parse a Level 1 EDTF.","","","","Parses a Date from a string. <strong>Note!</strong> This is not part of …","","","Creates a Date from a year, month and day. If month or …","Creates a Date from a year, month and day. If month or …","Returns the [Certainty] of this date.","Checks if a year falls inside the acceptable range of …","Equivalent to <code>201X</code> or <code>20XX</code>. The year has its masked …","Equivalent to e.g. <code>2019-XX</code>.","Equivalent to e.g. <code>2019-XX-XX</code>.","Equivalent to e.g. <code>2019-07-XX</code> Panics if year or month is …","Equivalent to e.g. <code>2019-21</code>","Returns a new Date with the specified [Certainty]. This …","Returns an enum more suited to use with a <code>match</code> …",""],"i":[0,0,1,1,1,0,0,0,2,2,2,2,0,3,3,3,0,4,4,0,5,5,5,5,0,6,6,6,6,0,0,7,7,7,7,7,7,7,7,0,8,9,0,10,10,0,11,11,11,11,11,0,12,12,12,12,12,0,13,13,13,13,13,0,14,14,14,0,15,1,1,1,1,1,1,1,1,1,1,8,8,8,8,8,8,8,8,8,8,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,9,9,9,9,9,9,9,9,9,9,7,7,7,7,7,7,7,7,7,7,16,16,16,16,16,16,16,16,16,16,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,7,7,3,2,11,1,7,12,9,1,8,4,5,6,9,7,16,3,2,10,11,12,13,14,3,2,1,1,8,8,4,4,5,6,6,9,9,7,7,16,16,3,2,10,11,11,12,12,13,13,14,14,1,8,4,5,6,7,16,9,3,2,10,11,12,13,14,1,8,9,12,11,16,7,10,1,8,11,12,13,14,1,7,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,14,14,14,14,14,14,1,1,1,1,1,1,8,8,8,8,8,8,4,16,16,16,7,7,7,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,12],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["naivedate",3],["option",4]]],[[],[["naivedate",3],["option",4]]],null,null,null,null,[[],["datecomplete",3]],[[],["time",3]],[[],[["option",4],["tzoffset",4]]],[[],["naivedatetime",3]],[[],["datetime",3]],null,[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]],["option",4]],[[],["i32",15]],[[],["u32",15]],[[],["u32",15]],null,[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],[["option",4],["tzoffset",4]]],[[],["naivetime",3]],null,null,null,null,null,[[],[["option",4],["tzoffset",4]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["date",3]]],[[]],[[["u8",15]]],[[["u8",15]]],[[],["datetime",3]],[[],["edtf",4]],[[],["edtf",4]],[[["naivedate",3]]],[[["naivedate",3]]],[[],["edtf",4]],[[],["date",3]],[[],["datepart",4]],[[],["season",4]],[[],["dateprecision",4]],[[],["date",3]],[[],["edtf",4]],[[],["yyear",3]],[[],["yearmask",4]],[[],["certainty",4]],[[],["parseerror",4]],[[],["datetime",3]],[[],["datecomplete",3]],[[],["time",3]],[[],["tzoffset",4]],[[]],[[]],[[["edtf",4]],["bool",15]],[[["edtf",4]],["bool",15]],[[["date",3]],["bool",15]],[[["date",3]],["bool",15]],[[["datepart",4]],["bool",15]],[[["datepart",4]],["bool",15]],[[["season",4]],["bool",15]],[[["dateprecision",4]],["bool",15]],[[["dateprecision",4]],["bool",15]],[[["date",3]],["bool",15]],[[["date",3]],["bool",15]],[[["edtf",4]],["bool",15]],[[["edtf",4]],["bool",15]],[[["yyear",3]],["bool",15]],[[["yyear",3]],["bool",15]],[[["yearmask",4]],["bool",15]],[[["certainty",4]],["bool",15]],[[["parseerror",4]],["bool",15]],[[["datetime",3]],["bool",15]],[[["datetime",3]],["bool",15]],[[["datecomplete",3]],["bool",15]],[[["datecomplete",3]],["bool",15]],[[["time",3]],["bool",15]],[[["time",3]],["bool",15]],[[["tzoffset",4]],["bool",15]],[[["tzoffset",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["i32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["weekday",4]],[[],["isoweek",3]],[[["i32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[],["i32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["weekday",4]],[[],["isoweek",3]],[[["i32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[],["fixedoffset",3]],[[]],[[["naivedate",3]],["localresult",4]],[[["naivedatetime",3]],["localresult",4]],[[["naivedate",3]]],[[["naivedatetime",3]]],[[["str",15]],[["result",4],["parseerror",4]]],[[["u32",15],["i32",15]],["option",4]],[[["u32",15],["i32",15]]],[[],[["option",4],["date",3]]],[[],["option",4]],[[],[["option",4],["datetime",3]]],[[],["i32",15]],[[],["u32",15]],[[],["u32",15]],[[["str",15]],[["result",4],["parseerror",4]]],[[["u32",15],["i32",15]],["option",4]],[[["u32",15],["i32",15]]],[[],[["u32",15],["option",4]]],[[],["i64",15]],[[["i64",15]],["option",4]],[[["i64",15]],[["edtf",4],["result",4]]],[[["str",15]],[["result",4],["parseerror",4]]],[[],[["option",4],["date",3]]],[[],["option",4]],[[],[["option",4],["datetime",3]]],[[["str",15]],[["result",4],["parseerror",4]]],[[["i32",15]]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]]],[[["u32",15],["i32",15]],["option",4]],[[],["certainty",4]],[[["i32",15]],["bool",15]],[[["yearmask",4],["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["u32",15],["i32",15]]],[[["season",4],["i32",15]]],[[["certainty",4]]],[[],["dateprecision",4]],[[],["naivedate",3]]],"p":[[4,"Edtf"],[4,"Certainty"],[4,"YearMask"],[4,"DatePart"],[4,"Season"],[4,"DatePrecision"],[4,"Edtf"],[3,"Date"],[3,"Date"],[4,"ParseError"],[3,"DateTime"],[3,"DateComplete"],[3,"Time"],[4,"TzOffset"],[8,"GetTimezone"],[3,"YYear"]]}\
}');
initSearch(searchIndex);